<?php
/**
 * Generated by Haxe 4.3.3
 */

namespace Src\Order\Pizza;

use \php\Boot;
use \haxe\Exception;
use \Src\Infrastructure\Helper;

class Pizza extends Helper {
	/**
	 * @var float
	 */
	public $additionalToppings;
	/**
	 * @var float
	 */
	public $crust;
	/**
	 * @var float
	 */
	public $dough;
	/**
	 * @var Flavor[]|\Array_hx
	 */
	public $flavors;
	/**
	 * @var float
	 */
	public $price;
	/**
	 * @var string
	 */
	public $priceBehavior;
	/**
	 * @var int
	 */
	public $quantity;
	/**
	 * @var float
	 */
	public $roundStep;
	/**
	 * @var string
	 */
	public $roundType;
	/**
	 * @var float
	 */
	public $totalGrossPrice;

	/**
	 * @return void
	 */
	public function __construct () {
		#src/order/pizza/Pizza.hx:20: characters 40-41
		$this->additionalToppings = 0;
		#src/order/pizza/Pizza.hx:19: characters 37-39
		$this->flavors = new \Array_hx();
		#src/order/pizza/Pizza.hx:18: characters 37-38
		$this->totalGrossPrice = 0;
		#src/order/pizza/Pizza.hx:17: characters 36-38
		$this->priceBehavior = "";
		#src/order/pizza/Pizza.hx:16: characters 32-34
		$this->roundType = "";
		#src/order/pizza/Pizza.hx:15: characters 31-32
		$this->roundStep = 0;
		#src/order/pizza/Pizza.hx:14: characters 28-29
		$this->quantity = 1;
		#src/order/pizza/Pizza.hx:13: characters 27-28
		$this->dough = 0;
		#src/order/pizza/Pizza.hx:12: characters 27-28
		$this->crust = 0;
		#src/order/pizza/Pizza.hx:11: characters 27-28
		$this->price = 0;
	}

	/**
	 * @param float $additionalToppings
	 * 
	 * @return void
	 */
	public function addAdditionalToppings ($additionalToppings) {
		#src/order/pizza/Pizza.hx:43: characters 3-48
		$this->additionalToppings += $additionalToppings;
	}

	/**
	 * @param float $crust
	 * 
	 * @return void
	 */
	public function addCrust ($crust) {
		#src/order/pizza/Pizza.hx:47: characters 3-22
		$this->crust += $crust;
	}

	/**
	 * @param float $dough
	 * 
	 * @return void
	 */
	public function addDough ($dough) {
		#src/order/pizza/Pizza.hx:51: characters 3-22
		$this->dough += $dough;
	}

	/**
	 * @param Flavor $flavor
	 * 
	 * @return void
	 */
	public function addFlavor ($flavor) {
		#src/order/pizza/Pizza.hx:23: characters 3-23
		$_this = $this->flavors;
		$_this->arr[$_this->length++] = $flavor;
	}

	/**
	 * @param float $price
	 * 
	 * @return void
	 */
	public function addPrice ($price) {
		#src/order/pizza/Pizza.hx:27: characters 3-21
		$this->price = $price;
	}

	/**
	 * @param string $priceBehavior
	 * 
	 * @return void
	 */
	public function addPriceBehavior ($priceBehavior) {
		#src/order/pizza/Pizza.hx:55: characters 3-37
		$this->priceBehavior = $priceBehavior;
	}

	/**
	 * @param int $quantity
	 * 
	 * @return void
	 */
	public function addQuantity ($quantity) {
		#src/order/pizza/Pizza.hx:31: characters 3-27
		$this->quantity = $quantity;
	}

	/**
	 * @param float $roundStep
	 * 
	 * @return void
	 */
	public function addRoundStep ($roundStep) {
		#src/order/pizza/Pizza.hx:39: characters 3-29
		$this->roundStep = $roundStep;
	}

	/**
	 * @param string $roundType
	 * 
	 * @return void
	 */
	public function addRoundType ($roundType) {
		#src/order/pizza/Pizza.hx:35: characters 3-29
		$this->roundType = $roundType;
	}

	/**
	 * @return float
	 */
	public function calculateTotalGrossPrice () {
		#src/order/pizza/Pizza.hx:59: characters 3-27
		$this->totalGrossPrice = 0;
		#src/order/pizza/Pizza.hx:61: lines 61-63
		if ($this->priceBehavior === "") {
			#src/order/pizza/Pizza.hx:62: characters 4-9
			throw Exception::thrown("Price behavior is missing");
		}
		#src/order/pizza/Pizza.hx:65: lines 65-67
		if (Boot::equal($this->price, 0) && ($this->flavors->length === 0)) {
			#src/order/pizza/Pizza.hx:66: characters 4-9
			throw Exception::thrown("Price is missing");
		}
		#src/order/pizza/Pizza.hx:69: characters 3-37
		$this->totalGrossPrice += $this->price;
		#src/order/pizza/Pizza.hx:71: characters 11-29
		$__hx__switch = ($this->priceBehavior);
		if ($__hx__switch === "average") {
			#src/order/pizza/Pizza.hx:73: characters 5-31
			$this->calculePriceAverage();
		} else if ($__hx__switch === "highest") {
			#src/order/pizza/Pizza.hx:75: characters 5-31
			$this->calculePriceHighest();
		} else {
			#src/order/pizza/Pizza.hx:77: characters 5-35
			$this->calculePriceIncremental();
		}
		#src/order/pizza/Pizza.hx:80: characters 3-78
		$this->totalGrossPrice += $this->additionalToppings + $this->crust + $this->dough;
		#src/order/pizza/Pizza.hx:82: characters 3-40
		$this->totalGrossPrice *= $this->quantity;
		#src/order/pizza/Pizza.hx:84: characters 3-30
		return $this->totalGrossPrice;
	}

	/**
	 * @return void
	 */
	public function calculePriceAverage () {
		#src/order/pizza/Pizza.hx:105: characters 3-26
		$flavorsQtd = 0;
		#src/order/pizza/Pizza.hx:106: characters 3-30
		$flavorsPrice = 0;
		#src/order/pizza/Pizza.hx:108: lines 108-111
		$result = [];
		$data = $this->flavors->arr;
		$_g_current = 0;
		$_g_length = \count($data);
		$_g_data = $data;
		while ($_g_current < $_g_length) {
			$item = $_g_data[$_g_current++];
			#src/order/pizza/Pizza.hx:109: characters 4-50
			$flavorsPrice += $item->price * $item->quantity;
			#src/order/pizza/Pizza.hx:108: lines 108-111
			$result[] = ($flavorsQtd += $item->quantity);
		}
		\Array_hx::wrap($result);
		#src/order/pizza/Pizza.hx:113: characters 3-29
		$flavorsPrice /= $flavorsQtd;
		#src/order/pizza/Pizza.hx:115: characters 3-15
		$flavorsPrice = $this->roundPizzaPrice($flavorsPrice);
		#src/order/pizza/Pizza.hx:117: lines 117-118
		if ($flavorsPrice > $this->totalGrossPrice) {
			#src/order/pizza/Pizza.hx:118: characters 4-24
			$this->totalGrossPrice = $flavorsPrice;
		}
	}

	/**
	 * @return void
	 */
	public function calculePriceHighest () {
		#src/order/pizza/Pizza.hx:94: characters 3-26
		$maxPrice = 0;
		#src/order/pizza/Pizza.hx:96: lines 96-98
		$result = [];
		$data = $this->flavors->arr;
		$_g_current = 0;
		$_g_length = \count($data);
		$_g_data = $data;
		while ($_g_current < $_g_length) {
			$item = $_g_data[$_g_current++];
			#src/order/pizza/Pizza.hx:97: characters 15-66
			if ($item->price > $maxPrice) {
				#src/order/pizza/Pizza.hx:97: characters 43-55
				$maxPrice = $item->price;
			}
			#src/order/pizza/Pizza.hx:96: lines 96-98
			$result[] = $maxPrice;
		}
		\Array_hx::wrap($result);
		#src/order/pizza/Pizza.hx:100: lines 100-101
		if ($maxPrice > $this->totalGrossPrice) {
			#src/order/pizza/Pizza.hx:101: characters 4-24
			$this->totalGrossPrice = $maxPrice;
		}
	}

	/**
	 * @return void
	 */
	public function calculePriceIncremental () {
		#src/order/pizza/Pizza.hx:87: lines 87-91
		$_gthis = $this;
		#src/order/pizza/Pizza.hx:88: lines 88-90
		$result = [];
		$data = $this->flavors->arr;
		$_g_current = 0;
		$_g_length = \count($data);
		$_g_data = $data;
		while ($_g_current < $_g_length) {
			$item = $_g_data[$_g_current++];
			#src/order/pizza/Pizza.hx:89: characters 4-8
			$_gthis1 = $_gthis;
			#src/order/pizza/Pizza.hx:88: lines 88-90
			$result[] = ($_gthis1->totalGrossPrice += $item->price * $item->quantity);
		}
		\Array_hx::wrap($result);
	}

	/**
	 * @param float $price
	 * 
	 * @return float
	 */
	public function roundPizzaPrice ($price) {
		#src/order/pizza/Pizza.hx:122: lines 122-123
		if ($this->roundStep <= 0) {
			#src/order/pizza/Pizza.hx:123: characters 4-16
			return $price;
		}
		#src/order/pizza/Pizza.hx:125: characters 11-25
		$__hx__switch = ($this->roundType);
		if ($__hx__switch === "down") {
			#src/order/pizza/Pizza.hx:129: characters 5-64
			$price = (int)(\floor($price / $this->roundStep)) * $this->roundStep;
		} else if ($__hx__switch === "up") {
			#src/order/pizza/Pizza.hx:127: characters 5-63
			$price = (int)(\ceil($price / $this->roundStep)) * $this->roundStep;
		} else {
			#src/order/pizza/Pizza.hx:131: characters 5-64
			$price = (int)(\floor($price / $this->roundStep + 0.5)) * $this->roundStep;
		}
		#src/order/pizza/Pizza.hx:137: characters 3-39
		return $this->formatReturnToPHP($price);
	}
}

Boot::registerClass(Pizza::class, 'src.order.pizza.Pizza');
