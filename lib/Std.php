<?php
/**
 * Generated by Haxe 4.3.4
 */

use \php\Boot;
use \php\_Boot\HxString;

/**
 * The Std class provides standard methods for manipulating basic types.
 */
class Std {
	/**
	 * Converts a `String` to a `Float`.
	 * The parsing rules for `parseInt` apply here as well, with the exception of invalid input
	 * resulting in a `NaN` value instead of `null`. Also, hexadecimal support is **not** specified.
	 * Additionally, decimal notation may contain a single `.` to denote the start of the fractions.
	 * It may also end with `e` or `E` followed by optional minus or plus sign and a sequence of
	 * digits (defines exponent to base 10).
	 * 
	 * @param string $x
	 * 
	 * @return float
	 */
	public static function parseFloat ($x) {
		#/usr/share/haxe/std/php/_std/Std.hx:79: characters 3-35
		$result = floatval($x);
		#/usr/share/haxe/std/php/_std/Std.hx:80: lines 80-81
		if (!Boot::equal($result, 0)) {
			#/usr/share/haxe/std/php/_std/Std.hx:81: characters 4-17
			return $result;
		}
		#/usr/share/haxe/std/php/_std/Std.hx:83: characters 3-22
		$x = ltrim($x);
		#/usr/share/haxe/std/php/_std/Std.hx:84: characters 3-53
		$firstCharIndex = (mb_substr($x, 0, 1) === "-" ? 1 : 0);
		#/usr/share/haxe/std/php/_std/Std.hx:85: characters 3-47
		$charCode = HxString::charCodeAt($x, $firstCharIndex);
		#/usr/share/haxe/std/php/_std/Std.hx:87: lines 87-89
		if ($charCode === 46) {
			#/usr/share/haxe/std/php/_std/Std.hx:88: characters 4-47
			$charCode = HxString::charCodeAt($x, $firstCharIndex + 1);
		}
		#/usr/share/haxe/std/php/_std/Std.hx:91: lines 91-95
		if (($charCode !== null) && ($charCode >= 48) && ($charCode <= 57)) {
			#/usr/share/haxe/std/php/_std/Std.hx:92: characters 4-14
			return 0.0;
		} else {
			#/usr/share/haxe/std/php/_std/Std.hx:94: characters 4-20
			return NAN;
		}
	}

	/**
	 * Converts any value to a String.
	 * If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.
	 * If `s` is an instance of a class and that class or one of its parent classes has
	 * a `toString` method, that method is called. If no such method is present, the result
	 * is unspecified.
	 * If `s` is an enum constructor without argument, the constructor's name is returned. If
	 * arguments exists, the constructor's name followed by the String representations of
	 * the arguments is returned.
	 * If `s` is a structure, the field names along with their values are returned. The field order
	 * and the operator separating field names and values are unspecified.
	 * If s is null, "null" is returned.
	 * 
	 * @param mixed $s
	 * 
	 * @return string
	 */
	public static function string ($s) {
		#/usr/share/haxe/std/php/_std/Std.hx:47: characters 3-27
		return Boot::stringify($s);
	}
}

Boot::registerClass(Std::class, 'Std');
